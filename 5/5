import os
import sys
import pygame
import requests


def update_x(x):
    if x >= 180:
        x = -1 * (360 - x)
    if x < -180:
        x = 360 + x
    return x


x = 0.0
y = 0.0
a = 10
b = 10
mode = "map"
params = {
    "ll": str(x) + "," + str(y),
    "spn": str(a) + "," + str(b),
    "l": mode
}
map_request1 = "https://static-maps.yandex.ru/1.x/"
# Инициализируем pygame
response = requests.get(map_request1, params=params)

if not response:
    print("Ошибка выполнения запроса:")
    print(map_request1)
    print("Http статус:", response.status_code, "(", response.reason, ")")
    sys.exit(1)

# Запишем полученное изображение в файл.
map_file = "map.png"
with open(map_file, "wb") as file:
    file.write(response.content)
pygame.init()
screen = pygame.display.set_mode((600, 500))
screen.blit(pygame.image.load(map_file), (0, 0))
pygame.display.flip()
# Переключаем экран и ждем закрытия окна.
font = pygame.font.Font(None, 32)
clock = pygame.time.Clock()
input_box = pygame.Rect(0, 450, 500, 50)
search = pygame.Rect(500, 450, 100, 50)
color_inactive = pygame.Color('lightskyblue3')
color_active = pygame.Color('dodgerblue2')
color = color_inactive
active = False
text = ''
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            # If the user clicked on the input_box rect.
            if input_box.collidepoint(event.pos):
                # Toggle the active variable.
                active = not active
            else:
                active = False
            if search.collidepoint(event.pos):
                print(text)
                response = requests.get(
                    "https://geocode-maps.yandex.ru/1.x/?apikey=40d1649f-0493-4b70-98ba-98533de7710b&format=json&geocode="+text)
                json_response = response.json()

                toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
                toponym_coodrinates = toponym["Point"]["pos"]
                print(toponym_coodrinates)
                x, y = toponym_coodrinates.split()
                params["ll"]=str(x) + "," + str(y)

                response = requests.get(map_request1, params=params)

                map_file = "map.png"
                with open(map_file, "wb") as file:
                    file.write(response.content)
                screen.blit(pygame.image.load(map_file), (0, 0))
                pygame.display.flip()
            # Change the current color of the input box.
            color = color_active if active else color_inactive
        if event.type == pygame.KEYDOWN:
            if active:
                if event.key == pygame.K_BACKSPACE:
                    text = text[:-1]
                else:
                    text += event.unicode
            if event.key == pygame.K_UP and y + 2 * a < 85:
                y += 2 * a
                print(y)
                params['ll'] = f'{x},{y}'
                response = requests.get(map_request1, params=params)
                map_file = "map.png"
                with open(map_file, "wb") as file:
                    file.write(response.content)
            if event.key == pygame.K_DOWN and y - 2 * a > -85:
                y -= 2 * a
                print(y)
                params['ll'] = f'{x},{y}'
                response = requests.get(map_request1, params=params)
                map_file = "map.png"
                with open(map_file, "wb") as file:
                    file.write(response.content)
            if event.key == pygame.K_LEFT:
                x -= 2 * a
                x = update_x(x)
                print(x)
                params['ll'] = f'{x},{y}'
                response = requests.get(map_request1, params=params)
                map_file = "map.png"
                with open(map_file, "wb") as file:
                    file.write(response.content)
            if event.key == pygame.K_RIGHT:
                x += 2 * a
                x = update_x(x)
                print(x)
                params['ll'] = f'{x},{y}'
                response = requests.get(map_request1, params=params)
                map_file = "map.png"
                with open(map_file, "wb") as file:
                    file.write(response.content)

    # Рисуем картинку, загружаемую из только что созданного файла.
    screen.fill((0, 0, 0))
    screen.blit(pygame.image.load(map_file), (0, 0))
    txt_surface = font.render(text, True, color)
    txt_search = font.render('Искать', True, (0, 0, 0))
    # Resize the box if the text is too long.
    # width = max(200, txt_surface.get_width() + 10)
    # input_box.w = width
    # Blit the text.
    screen.blit(txt_surface, (input_box.x + 5, input_box.y + 5))
    # Blit the input_box rect.
    pygame.draw.rect(screen, (200, 200, 200), search)
    pygame.draw.rect(screen, color, input_box, 2)
    screen.blit(txt_search, (search.x + 15, search.y + 15))
    pygame.display.flip()

pygame.quit()

# Удаляем за собой файл с изображением.
os.remove(map_file)
